name "low_level_driver"
version "0.1"

#Checkt Package Config nach include pfaden (hier z.B. Sonar.h
import_types_from "base"
import_types_from "LongExposure.hpp"
import_types_from "ShortExposure.hpp"
import_types_from "DebugLED.hpp"
import_types_from "LightValue.hpp"
import_types_from "DepthReading.hpp"

using_library "lowlevelDriver"

task_context "LowLevelTask" do
	#	 Name Frei belibig, Namespace::Objekt
	needs_configuration
	
	output_port("depth_samples", "base::samples::RigidBodyState").
		doc "Current Depth"
    
	input_port("ShortExposure","controlData::ShortExposure").
		doc "Short Exposure Time for Triggered Prosilica Mode"
	
	input_port("LongExposure","controlData::LongExposure").
		doc "Long Exposure Time for Triggered Prosilica Mode"
	
	input_port("LightValue","controlData::LightValue").
		doc "Light Target Value"
	
	input_port("DebugLED","controlData::DebugLED").
		doc "Debug LED Values"
	
        # IIR filter factor for the Z measurement.
        #  z_value = zIIR * new_z + (1 - zIIR) * z_value
        property('zIIR', 'double', 0.5);
        # IIR filter factor for the Z speed measurement.
        #  zVelocity_value = zVelocityIIR * new_zVelocity + (1 - zVelocityIIR) * zVelocity_value
        property('zVelocityIIR', 'double', 1.0);
	property('longExposure', 'int', 15000)
	property('shortExposure', 'int', 5000)

	property('port', '/std/string', "").
        	doc 'the device port'
	
	property('securityOverride','bool',true).
		doc "Sercutiry Overrite to make the laser working also until avalon not reaches the safe-depth"
	
	port_driven :ShortExposure
	port_driven :LongExposure
	port_driven :LightValue
	port_driven :DebugLED

        fatal_states :IO_ERROR
	fd_driven	
end

deployment "low_level_task_application" do
	bla = task("LowLevelTask","LowLevelTask")
	
	add_default_logger

	if !corba_enabled?
		browse bla
	end
end

